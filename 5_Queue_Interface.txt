Queue Interface
===============

* Before Processing If you want to represent group of individual Object as single entity 
  then we should go for Queue.
* Java Queue interface orders the element in FIFO(First In First Out) manner. In FIFO, first element is removed first and last element is removed at last.
* It can be defined as an ordered list that is used to hold the elements which are about to be processed. 

EX : Before Sending email all email id's we have to store somewhere and in which order we saved 
 in the same order mails should be delevered  (First In First Out) for this concept Queue is the best choice.


Queue Interface declaration
===========================

public interface Queue<E> extends Collection<E>  


Methods of Java Queue Interface
===============================

Method	                                                            Description

boolean add(object)	                               It is used to insert the specified element into this queue and return true upon success.

boolean offer(object)	                           It is used to insert the specified element into this queue.

Object remove()	                                   It is used to retrieves and removes the head of this queue.

Object poll()	                                   It is used to retrieves and removes the head of this queue, or returns null if this queue is empty.

Object element()	                               It is used to retrieves, but does not remove, the head of this queue.

Object peek()	                                   It is used to retrieves, but does not remove, the head of this queue, or returns null if this queue is empty.


------------------------------------------------------------------------------------------------------------------------------------------------------------------
PriorityQueue class
===================

* The PriorityQueue class provides the facility of using queue. But it does not orders the elements in FIFO manner. It inherits AbstractQueue class.
* Priority Queue does not follow FIFO rule like the normal Queue I arranges the element based on their Priorities.
* Priority Queue Can store comparable objects to arrange them in correct priorities.
* It has method like add(), removes() etc It has method like poll() used to retrive and remove element from the head of the Queue.
* Priority Queue implemets  the comparable interface.
* Priority Queue is not a Thread-Safe.
* Priority Queue does not allow null value to be stored in the queue.

PriorityQueue class declaration
===============================

Let's see the declaration for java.util.PriorityQueue class.

public class PriorityQueue<E> extends AbstractQueue<E> implements Serializable  

Example 
=======

import java.util.*;  
class Book implements Comparable<Book>{  
int id;  
String name,author,publisher;  
int quantity;  
public Book(int id, String name, String author, String publisher, int quantity) {  
    this.id = id;  
    this.name = name;  
    this.author = author;  
    this.publisher = publisher;  
    this.quantity = quantity;  
}  
public int compareTo(Book b) {  
    if(id>b.id){  
        return 1;  
    }else if(id<b.id){  
        return -1;  
    }else{  
    return 0;  
    }  
}  
}  
public class LinkedListExample {  
public static void main(String[] args) {  
    Queue<Book> queue=new PriorityQueue<Book>();  
    //Creating Books  
    Book b1=new Book(121,"Let us C","Yashwant Kanetkar","BPB",8);  
    Book b2=new Book(233,"Operating System","Galvin","Wiley",6);  
    Book b3=new Book(101,"Data Communications & Networking","Forouzan","Mc Graw Hill",4);  
    //Adding Books to the queue  
    queue.add(b1);  
    queue.add(b2);  
    queue.add(b3);  
    System.out.println("Traversing the queue elements:");  
    //Traversing queue elements  
    for(Book b:queue){  
    System.out.println(b.id+" "+b.name+" "+b.author+" "+b.publisher+" "+b.quantity);  
    }  
    queue.remove();  
    System.out.println("After removing one book record:");  
    for(Book b:queue){  
        System.out.println(b.id+" "+b.name+" "+b.author+" "+b.publisher+" "+b.quantity);  
        }  
}  
}  
--------------------------------------------------------------------------------------------------------------------------------------------------------------------

Deque Interface
===============

Deque interface extends the Queue interface. In Deque, we can remove and add the elements from both the side. 
Deque stands for a double-ended queue which enables us to perform the operations at both the ends.
A deque is a linear collection that supports insertion and deletion of elements from both the ends. The name 'deque' is an abbreviation for double-ended queue.

There are no fixed limits on the deque for the number of elements they may contain. However, 
this interface supports capacity restricted deques as well as the deques with no fixed size limits. 
There are various methods which are provided to insert, remove and examine the elements.

These methods typically exist in two forms: the one that throws an exception when the particular 
operation fails and the other returns a special value which can be either null or false depending upon the operations.

Deque can be instantiated as:

Deque d = new ArrayDeque(); 


-------------------------------------------------------------------------------------------------------------------------------------------------

ArrayDeque
==========

The ArrayDeque in Java provides a way to apply resizable-array in addition to the implementation of the Deque interface. 
It is also known as Array Double Ended Queue or Array Deck. This is a special kind of array that grows and allows users to 
add or remove an element from both sides of the queue. 

Few important features of ArrayDeque are as follows:  

*Array deques have no capacity restrictions and they grow as necessary to support usage.
*They are not thread-safe which means that in the absence of external synchronization, ArrayDeque does not support concurrent access by multiple threads.
*Null elements are prohibited in the ArrayDeque.
*ArrayDeque class is likely to be faster than Stack when used as a stack.
*ArrayDeque class is likely to be faster than LinkedList when used as a queue.



















